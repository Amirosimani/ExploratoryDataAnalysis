#Tools: spliting tools to seperate columns
tools <- strsplit(as.character(DataFrame$tools),',')
setDT(DataFrame)[, paste0("tools", 1:16) := tstrsplit(tools, ",")]   #Add seperate column for each program
# Multiple plot function
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
deg.status = left_join(count(DataFrame, vars= degree),
count(select(DataFrame, 1:2)[grep("Yes", dd$waitlist), ], vars = degree),
by = "vars")
deg.status = deg.status[ , N := sum(n.x, n.y, na.rm=TRUE), by=1:NROW(deg.status)]
deg.status = left_join(count(DataFrame, vars= degree),
count(select(DataFrame, 1:2)[grep("Yes", dd$waitlist), ], vars = degree),
by = "vars")
deg.status = count(select(DataFrame, 1:2)[grep("Yes", dd$waitlist), ], vars = degree),
by = "vars")
deg.status = count(select(DataFrame, 1:2)[grep("Yes", dd$waitlist), ], vars = degree),
by = "vars")
deg.status = count(select(DataFrame, 1:2)[grep("Yes", dd$waitlist), ]
deg.status = count(select(DataFrame, 1:2)[grep("Yes", dd$waitlist), ])
deg.status = left_join((count(DataFrame, vars= degree),
count(select(DataFrame, 1:2)[grep("Yes", dd$waitlist), ], vars = degree),
by = "vars")
View(DataFrame)
deg.status = [grep("Yes", dd$waitlist), ]
deg.status = grep("Yes", DataFrame$waitlist),
deg.status = grep("Yes", DataFrame$waitlist)
deg.status = DataFrame[grep("Yes", DataFrame$waitlist), ]
View(deg.status)
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = waitlisted[,.SD,.SDcols=c(1,3)]
View(waitlisted.degree)
View(waitlisted)
waitlisted.degree = waitlisted[,.SD,.SDcols=c(1,2)]
View(waitlisted.degree)
waitlisted.degree = count(waitlisted[,.SD,.SDcols=c(1,2)])
View(waitlisted.degree)
waitlisted.degree = count(select[waitlisted, 1:2)
waitlisted.degree = count(select(waitlisted, 1:2)
waitlisted.degree = count(select(waitlisted, 1:2))
View(waitlisted.degree)
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = count(select(waitlisted, 1:2))
View(waitlisted)
waitlisted.degree = select(waitlisted, 1:2)
View(waitlisted.degree)
waitlisted.degree = count(select(waitlisted, 1:2))
count(waitlisted.degree)
count(waitlisted.degree, vars = degree)
waitlisted.degree = select(waitlisted, 1:2)
count(waitlisted.degree, vars = degree)
waitlisted.degree = count(waitlisted.degree, vars = degree)
View(waitlisted.degree)
deg.status = deg.status[ , N := sum(n.x, n.y, na.rm=TRUE), by=1:NROW(deg.status)]
waitlistGraph <- ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist))) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
multiplot(waitlistGraph, degreeGraph, cols=2)
View(waitlisted.degree)
degree.t <- DataFrame[,.N,by= degree]
View(degree.t)
View(degree.t)
View(waitlisted.degree)
waitlisted.degree = count(waitlisted.degree, degree = degree)
waitlisted.degree = count(waitlisted.degree, vars = degree)
colnames(waitlisted.degree) <- c("degree","N")
View(waitlisted.degree)
left_join(degree.t, waitlisted.degree, by = "degree")
View(DataFrame)
View(deg.status)
DataFrame$degree = gsub("\\(master\\)", "", DataFrame$degree)
DataFrame$degree[which(DataFrame$degree== "MSDS")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Ms in ds")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Data Science")]<-"IDSE"
#Tools: spliting tools to seperate columns
tools <- strsplit(as.character(DataFrame$tools),',')
setDT(DataFrame)[, paste0("tools", 1:16) := tstrsplit(tools, ",")]   #Add seperate column for each program
degree.t <- DataFrame[,.N,by= degree]
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = select(waitlisted, 1:2)
waitlisted.degree = count(waitlisted.degree, vars = degree)
colnames(waitlisted.degree) <- c("degree","N")
left_join(degree.t, waitlisted.degree, by = "degree")
degree.t <- left_join(degree.t, waitlisted.degree, by = "degree")
View(degree.t)
degree.t[is.na(deg.status)] <- 0
degree.t[is.na(degree.t)] <- 0
View(degree.t)
View(degree.t)
View(waitlisted.degree)
View(degree.t)
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = select(waitlisted, 1:2)
waitlisted.degree = count(waitlisted.degree, vars = degree)
View(waitlisted.degree)
degree.t <- DataFrame[,.N,by= degree]
View(degree.t)
degree.t <- DataFrame[,.N,by= degree]
View(degree.t)
degree.t$QMSS
degree.t[QMSS]
degree.t(QMSS)
degreeFactors <- DataFrame[,.N,by= degree]
degreeFactors$N[1] <- degreeFactors$N[1] + degreeFactors$N[6] + degreeFactors$N[8] + degreeFactors$N[12]
degreeFactors <- degreeFactors[-c(6, 8, 12), ]
degreeFactors <- degreeFactors[order(-N),]
degreeFactors <- data.frame(degreeFactors)
View(degreeFactors)
CSV_url <- getURL("https://raw.githubusercontent.com/Amirosimani/ExploratoryDataAnalysis/master/Survey.csv")
DataFrame <- read.csv(text = CSV_url)
## Tidying the data frame
DataFrame <- Filter(function(x)!all(is.na(x)), DataFrame) #Delete empty columns
colnames(DataFrame) <- c("waitlist","degree","tools",
"R_DataManipulation", "pronoun","editor","R_Graphics",
"R_MultiVariate","Markdown","Matlab_DataManipulation","GitHub") #Rename columns name
# cleaning up text
DataFrame$tools = gsub("\\(formerly docs\\)", "", DataFrame$tools)
DataFrame$tools =  gsub("\\(grep\\)", "", gsub("\\(terminal \\/ command line\\)","", DataFrame$tools))
#Degree: removing non-unique values, combingin similar ones, etc
DataFrame$degree = gsub("\\(master\\)", "", DataFrame$degree)
DataFrame$degree[which(DataFrame$degree== "MSDS")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Ms in ds")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Data Science")]<-"IDSE"
View(DataFrame)
count(DataFrame, vars = degree)
DataFrame$degree[which(DataFrame$degree== "MSDS")]<-"IDSE "
DataFrame$degree[which(DataFrame$degree== "Ms in ds")]<-"IDSE "
DataFrame$degree[which(DataFrame$degree== "Data Science")]<-"IDSE "
count(DataFrame, vars = degree)
DataFrame$degree[which(DataFrame$degree== "MSDS")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Ms in ds")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Data Science")]<-"IDSE"
count(DataFrame, vars = degree)
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = select(waitlisted, 1:2)
waitlisted.degree = count(waitlisted.degree, vars = degree)
colnames(waitlisted.degree) <- c("degree","N")
degree.t <- DataFrame[,.N,by= degree]
View(waitlisted.degree)
total.degree <- count(DataFrame, vars = degree)
View(total.degree)
View(total.degree)
total.degree[-c(3, 9), ]
left_join(total.degree, waitlisted.degree)
left_join(total.degree, waitlisted.degree, by = degree)
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = select(waitlisted, 1:2)
waitlisted.degree = count(waitlisted.degree, vars = degree)
total.degree <- count(DataFrame, vars = degree)
total.degree[-c(3, 9), ]
left_join(total.degree, waitlisted.degree, by = vars)
library(RCurl)
library(data.table)
library(ggplot2)
library(grid)
library(dplyr)
# Read  file from GitHub repo
CSV_url <- getURL("https://raw.githubusercontent.com/Amirosimani/ExploratoryDataAnalysis/master/Survey.csv")
DataFrame <- read.csv(text = CSV_url)
## Tidying the data frame
DataFrame <- Filter(function(x)!all(is.na(x)), DataFrame) #Delete empty columns
colnames(DataFrame) <- c("waitlist","degree","tools",
"R_DataManipulation", "pronoun","editor","R_Graphics",
"R_MultiVariate","Markdown","Matlab_DataManipulation","GitHub") #Rename columns name
# cleaning up text
DataFrame$tools = gsub("\\(formerly docs\\)", "", DataFrame$tools)
DataFrame$tools =  gsub("\\(grep\\)", "", gsub("\\(terminal \\/ command line\\)","", DataFrame$tools))
#Degree: removing non-unique values, combingin similar ones, etc
DataFrame$degree = gsub("\\(master\\)", "", DataFrame$degree)
DataFrame$degree[which(DataFrame$degree== "MSDS")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Data Science")]<-"IDSE"
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Multiple plot function
DataFrame$degree[which(DataFrame$degree== "Ms in ds")]<-"IDSE"
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
#to do: data label on bars
#waitlist graph
waitlistGraph <- ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist))) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
#degrees graph
#R Data manipulation graph
dataManiGraph <- ggplot(DataFrame, aes(factor(DataFrame$R_DataManipulation), fill = degree)) + geom_bar(width=.5) +
labs(title = "Data Manipulation with R", x = "Confidence Level", y = "Number of students")
#R Graphics
RGraphicsGraph <- ggplot(DataFrame, aes(factor(DataFrame$R_Graphics), fill = degree)) + geom_bar(width=.5) +
labs(title = "Basic Graphics with R", x = "Confidence Level", y = "Number of students")
#R Advanced amd  visualization
RAdvancedGraph <- ggplot(DataFrame, aes(factor(DataFrame$R_MultiVariate),fill = degree)) + geom_bar(width=.5) +
labs(title = "Advanced Analysis and Visualization with R", x = "Confidence Level", y = "Number of students")
#R Markdown
RMDGraph <- ggplot(DataFrame, aes(factor(DataFrame$Markdown), fill = degree)) + geom_bar(width=.5) +
labs(title ="R Markdown", x = "Confidence Level", y = "Number of students")
#Matlab Data Manipulation
MatlabGraph <- ggplot(DataFrame, aes(factor(DataFrame$Matlab_DataManipulation), fill = degree)) + geom_bar(width=.5) +
labs(title = "Data Manipulation wiht Matlab", x = "Confidence Level", y = "Number of students")
#GitHub
GitHubGraph <- ggplot(DataFrame, aes(factor(DataFrame$GitHub), fill = degree)) + geom_bar(width=.5) +
labs(title = "GitHub", x = "Confidence Level", y = "Number of students")
toolsDF = setDT(select(DataFrame, degree, tools))[,]
tools <- strsplit(as.character(toolsDF$tools),',')
a1 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("R", tools)), length))
toolsDF[, R:= a1]
a2 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Excel", tools)), length))
toolsDF[, Excel:= a2]
a3 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("SQL", tools)), length))
toolsDF[, SQL:= a3]
a4 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("ggplot2", tools)), length))
toolsDF[, ggplot2:= a4]
a5 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Python", tools)), length))
toolsDF[, Python:= a5]
a6 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Stata", tools)), length))
toolsDF[, Stata:= a6]
a7 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("dropbox", tools)), length))
toolsDF[, dropbox:= a7]
a8 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("google drive", tools)), length))
toolsDF[, googledirve:= a8]
a9 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("LaTeX", tools)), length))
toolsDF[, LaTeX:= a9]
a10 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("regular expressions", tools)), length))
toolsDF[, RegEx:= a10]
a11 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Sweave/knitr", tools)), length))
toolsDF[, Sweave.knitr:= a11]
a12 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("XML", tools)), length))
toolsDF[, xml:= a12]
a13 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Web: html css js", tools)), length))
toolsDF[, web:= a13]
a14 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("shell", tools)), length))
toolsDF[, shell:= a14]
a15 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Github", tools)), length))
toolsDF[, Github:= a15]
a16 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("C\\/C\\+\\+", tools)), length))
toolsDF[, C:= a16]
a17 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Matlab", tools)), length))
toolsDF[, Matlab:= a17]
a18 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("SPSS", tools)), length))
toolsDF[, SPSS:= a18]
a19 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("RStudio", tools)), length))
toolsDF[, RStudio:= a19]
toolsDF$R <- toolsDF$R - toolsDF$RStudio
setkey(toolsDF)
toolsDF$degree <- as.factor(toolsDF$degree)
toolsDF[,tools:=NULL]
toolsDF.degree = toolsDF[, lapply(.SD, sum), by = degree]
toolsDF.degree.m <- melt(toolsDF.degree)
ggplot(toolsDF.degree.m, aes(degree, variable)) + geom_tile(aes(fill = value , colour = "white"))
View(toolsDF.degree.m)
View(toolsDF.degree)
toolsDF.degree[ , lapply(.SD , mean ) , by = degree ]
d <- toolsDF.degree[ , lapply(.SD , mean ) , by = degree ]
View(d)
View(DataFrame)
View(DataFrame)
CSV_url <- getURL("https://raw.githubusercontent.com/Amirosimani/ExploratoryDataAnalysis/master/Survey.csv")
DataFrame <- read.csv(text = CSV_url)
View(DataFrame)
setwd("~/GitHub/ExploratoryDataAnalysis")
require(xlsx)
library(ggplot2)
setwd("~/GitHub/ExploratoryDataAnalysis")
require(xlsx)
library(ggplot2)
library(dummies)
install.packages("dummies")
raw_data <- read.xlsx("Survey.xlsx", sheetName = "Form Responses 1")
# This is the dataset we use in the following
dataset <- raw_data
dataset$gender[raw_data$What.is.your.preferred.gender.pronoun.=="he/him"] = "Male"
dataset$gender[raw_data$What.is.your.preferred.gender.pronoun.=="she/her"] = "Female"
dataset$gender[raw_data$What.is.your.preferred.gender.pronoun.=="doesn't matter"] = "Declined to state"
dataset$gender[is.na(raw_data$What.is.your.preferred.gender.pronoun.)] = "Declined to state"
dataset$gender <- factor(dataset$gender)
## 2.Program
dataset$program <- raw_data$Program
dataset$program[raw_data$Program == 'Ms in ds'] = 'IDSE (master)'
dataset$program[raw_data$Program == 'MSDS'] = 'IDSE (master)'
dataset$program[raw_data$Program == 'Data Science'] = 'IDSE (master)'
dataset$program[raw_data$Program == 'Applied Math'] = 'Other masters'
dataset$program[raw_data$Program == 'PhD Biomedical Informatics'] = 'Ph.D.'
dataset$program[raw_data$Program == 'QMSS'] = 'QMSS (master)'
dataset$program <- factor(dataset$program)
## 3.Waitlist
dataset$waitlist = factor(raw_data$Are.you.on.the.waiting.list.)
## 4.skill Dummies
# Get the skills for each samples.
skill_list <- strsplit(as.character(raw_data$Experiences.with.tools), ", ")
# Create a list for all skill names
skill_name <- vector(mode="character", length=0)
# Create dummies for skills, loop through samples and skills
for (sample_index in 1:nrow(raw_data)) {
for (skill in skill_list[[sample_index]]) {
# append the names, create a new column if it is a new skill
if (!is.element(skill, skill_name)) {
skill_name = append(skill_name,skill)
dataset[,skill] = 0
}
dataset[sample_index,skill] = 1
}
}
## 5 text editor
dataset$text_editor <- raw_data$What.code.text.editor.do.you.use.most.
## 6. Confidence
dataset$conf_r_manipulation <- factor(dataset$Programming.and.Analytical.Experiences..R..data.manipulation.and.modeling.,levels=c('None','A little', 'Confident', 'Expert'), ordered= TRUE)
dataset$conf_r_graphic <- factor(dataset$Programming.and.Analytical.Experiences..R..graphic.basics..base..lattice..grid.etc....  ,levels=c('None','A little', 'Confident', 'Expert'), ordered= TRUE)
dataset$conf_r_multivariate <- factor(dataset$Programming.and.Analytical.Experiences..R..advanced..multivariate.data.analysis..e.g..spatiotemporal.data..visualization.and.modeling..    ,levels=c('None','A little', 'Confident', 'Expert'), ordered= TRUE)
dataset$conf_r_markdown <- factor(dataset$Programming.and.Analytical.Experiences..Reproducible.documentation.with.R..e.g..R.Markdown..  ,levels=c('None','A little', 'Confident', 'Expert'), ordered= TRUE)
dataset$conf_github <- factor(dataset$Programming.and.Analytical.Experiences..Github.,levels=c('None','A little', 'Confident', 'Expert'), ordered= TRUE)
dataset$conf_matlab <- factor(dataset$Programming.and.Analytical.Experiences..Matlab..data.manipulation..analysis..visualization.and.modeling.  ,levels=c('None','A little', 'Confident', 'Expert'), ordered= TRUE)
## Drop old columns
dataset <- dataset[,-(1:38)]
##################################################################################################
## Making subgroups
subgroup_R <- dataset[dataset$R==1,]
subgroup_IDSE <- dataset[dataset$program==c('IDSE (master)', 'Data Science Certification'),]
subgroup_nonIDSE <- dataset[dataset$program!=c('IDSE (master)', 'Data Science Certification'),]
subgroup_male <- dataset[dataset$gender=='Male',]
subgroup_female <- dataset[dataset$gender=='Female',]
View(subgroup_R)
View(subgroup_nonIDSE)
View(subgroup_male)
View(subgroup_IDSE)
View(subgroup_female)
View(dataset)
View(dataset)
View(dataset)
View(subgroup_IDSE)
subgroup_heatmap <- dataset[c(2,4:10)]
View(subgroup_heatmap)
subgroup_heatmap <- dataset[c(2,4:20)]
View(subgroup_heatmap)
subgroup_heatmap <- dataset[c(2,4:23)]
View(subgroup_heatmap)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")
libray(csv)
library(csv)
library(csvread)
library(RCurl)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")
View(nba)
nba$Name <- with(nba, reorder(Name, PTS))
View(nba)
library(ggplot2)
nba.m <- melt(nba)
library(ggplot)
library(ggplot2)
nba.m <- melt(nba)
library(reshape)
library(reshape)
nba.m <- melt(nba)
View(nba.m)
subgroup_heatmap.m <- melt(subgroup_heatmap)
View(subgroup_heatmap.m)
nba.m <- ddply(nba.m, .(variable), transform, rescale = rescale(value))
library(plyr)
nba.m <- ddply(nba.m, .(variable), transform, rescale = rescale(value))
library(ggplot2)
nba.m <- ddply(nba.m, .(variable), transform, rescale = rescale(value))
View(subgroup_heatmap.m)
nba.m <- ddply(nba.m, .(variable), transform,
rescale = rescale(value))
library(scales)
nba.m <- ddply(nba.m, .(variable), transform,
rescale = rescale(value))
View(nba.m)
library(scales)
subgroup_heatmap.m <- ddply(subgroup_heatmap.m, .(variable), transform,
rescale = rescale(value))
View(subgroup_heatmap.m)
p <- ggplotsubgroup_heatmap.m, aes(variable, program)) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white", high = "steelblue"))
ggplotsubgroup_heatmap.m, aes(variable, program)) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white", high = "steelblue"))
ggplotsubgroup_heatmap.m, aes(variable, program))
ggplot(subgroup_heatmap.m, aes(variable, program)) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white", high = "steelblue"))
ggplot(subgroup_heatmap.m, aes(variable, program))
ggplot(subgroup_heatmap.m, aes(variable, program))+ geom_tile(aes(fill = rescale))
ggplot(subgroup_heatmap.m, aes(variable, program))+ geom_tile(aes(fill = rescale),
colour = "white")
ggplot(subgroup_heatmap.m, aes(variable, program))+ geom_tile(aes(fill = rescale),
colour = "white"), scale_fill_gradient(low = "white", high = "steelblue"))
ggplot(subgroup_heatmap.m, aes(variable, program))+ geom_tile(aes(fill = rescale),
colour = "white"), scale_fill_gradient(low = "white", high = "steelblue")
ggplot(subgroup_heatmap.m, aes(variable, program))+ geom_tile(aes(fill = rescale),
colour = "white", scale_fill_gradient(low = "white", high = "steelblue"))
ggplot(subgroup_heatmap.m, aes(variable, program))+ geom_tile(aes(fill = value),
colour = "white", scale_fill_gradient(low = "white", high = "steelblue"))
ggplot(subgroup_heatmap.m, aes(variable, program))+ geom_tile(aes(fill = value),
colour = "white")
ggplot(subgroup_heatmap.m, aes(program, variable))+ geom_tile(aes(fill = value), colour = "white")
ggplot(subgroup_heatmap.m, aes(program, variable))+ geom_tile(aes(fill = value), colour = "white")
ggplot(subgroup_heatmap.m, aes(program, variable))+
geom_tile(aes(fill = value), colour = "white")
subgroup_heatmap.m <- melt(subgroup_heatmap)
ggplot(subgroup_heatmap.m, aes(program, variable))+
geom_tile(aes(fill = value), colour = "white")
base_size <- 9
p <- ggplot(subgroup_heatmap.m, aes(program, variable))+
geom_tile(aes(fill = value), colour = "white")
p + theme_grey(base_size = base_size) + labs(x = "",
y = "") + scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) + opts(legend.position = "none",
axis.ticks = theme_blank(), axis.text.x = theme_text(size = base_size *
0.8, angle = 330, hjust = 0, colour = "grey50"))
ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue"))
ggplot(subgroup_heatmap.m, aes(program, variable))+
geom_tile(aes(fill = value), colour = "white")
setkey(subgroup_heatmap.m)
heatmap(subgroup_heatmap.m, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
heatmap(subgroup_heatmap.m, Rowv=NA, Colv=NA, col = cm.colors(256), scale="variable", margins=c(5,10)
heatmap(subgroup_heatmap.m, Rowv=NA, Colv=NA, col = cm.colors(256), scale="variable", margins=c(5,10))
heatmap(subgroup_heatmap.m, Rowv=NA, Colv=NA, col = cm.colors(256), scale="none", margins=c(5,10))
heat.matrix <- data.matrix(subgroup_heatmap.m)
heatmap(heat.matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="none", margins=c(5,10))
ggplot(heat.matrix, aes(program, variable))+
geom_tile(aes(fill = value), colour = "white")
ggplot(subgroup_heatmap.m, aes(program, variable))+
geom_tile(aes(fill = value), colour = "white")
View(dataset)
ggplot(dataset, aes(factor(dataset$GitHub), fill = gender)) + geom_bar(width=.5) +
labs(title = "GitHub", x = "Confidence Level", y = "Number of students")
ggplot(dataset, aes(factor(dataset$conf_gitHub), fill = gender)) + geom_bar(width=.5) +
labs(title = "GitHub", x = "Confidence Level", y = "Number of students")
ggplot(dataset, aes(factor(dataset$conf_gitHub), fill = gender))
ggplot(dataset, aes(dataset$conf_gitHub, fill = gender))
ggplot(dataset, aes(factor(dataset$conf_gitHub), fill = gender))
g <- ggplot(dataset, aes(conf_github))
ggplot(dataset, aes(conf_github))
ggplot(dataset, aes(conf_github)) + geombar()
ggplot(dataset, aes(conf_github)) + geom_bar()
github.conf <- ggplot(dataset, aes(conf_github))
github.conf + geom_bar(aes(fill = gender))
github.conf + geom_bar(aes(fill = gender)) + position = "fill"
github.conf + geom_bar(aes(fill = gender) + position = "fill"_
github.conf + geom_bar(aes(fill = gender) + position = "fill")
github.conf + geom_bar(aes(fill = gender) , position = "fill")
github.conf <- ggplot(dataset, aes(conf_github))
github.conf + geom_bar(aes(fill = gender) , position = "fill") +
labs(title = "GitHub", x = "Confidence Level", y = "Number of students")
github.conf <- ggplot(dataset, aes(conf_github), label = gender)
github.conf + geom_bar(aes(fill = gender) , position = "fill") +
labs(title = "GitHub", x = "Confidence Level", y = "Number of students")
github.conf <- ggplot(dataset, aes(conf_github), label = count(gender))
github.conf + geom_bar(aes(fill = gender) , position = "fill") +
labs(title = "GitHub", x = "Confidence Level", y = "Number of students")
github.conf <- ggplot(dataset, aes(conf_github, label = count(gender)))
github.conf + geom_bar(aes(fill = gender) , position = "fill") +
labs(title = "GitHub", x = "Confidence Level", y = "percent of students")
## Heatmap
github.conf <- ggplot(dataset, aes(conf_github))
github.conf + geom_bar(aes(fill = gender) , position = "fill") +
labs(title = "GitHub", x = "Confidence Level", y = "percent of students")
github.conf + geom_bar(aes(fill = gender)) +
labs(title = "GitHub", x = "Confidence Level", y = "percent of students")
View(subgroup_heatmap.m)
subgroup_heatmap.m <- melt(subgroup_heatmap)
ggplot(subgroup_heatmap.m, aes(program, variable))+
geom_tile(aes(fill = value), colour = "white")
unique(subgroup_heatmap.m)
unique(subgroup_heatmap)
sapply(subgroup_heatmap, function(x) length(unique(x)))
